/*
 * MagSpoof - "wireless" magnetic stripe/credit card emulator
 *
 * Original by Samy Kamkar
 * MagSpoofPI by Salvador Mendoza
 *
 * http://samy.pl/magspoof
 * https://github.com/salmg/MagSpoofPI
 * https://netxing.wordpress.com/2016/08/27/magspoofpi/
 *
 */


#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <avr/sleep.h>

                            // min 5 IPS, max 50 IPS
#define SWIPE_SPEED   10    // inches per second

#define bool uint8_t
#define HIGH 1
#define LOW 0

#define interrupts() sei()
#define no_interrupts() cli()

/*
#define SINGLE_POLE   // only drive one side of the coil
                      // as described in http://www.idogendel.com/en/archives/507
*/

#define COIL_A PB0
#define COIL_B PB1
#define BUTTON_PIN PB2
#define LED_PIN PB3 
   
// I/O macros
#define PIN_HIGH(pin)   PORTB |= (HIGH << pin)
#define PIN_LOW(pin)    PORTB &= ~(HIGH << pin)
#define PINREAD(pin)    PINB & (HIGH << pin)

const uint16_t leading_zeros[3] = { 10, 20, 10 };
const uint16_t trailing_zeros[3] = { 10, 10, 10 };
const uint8_t track_density[3] = { 210, 75, 210 }; // bits per inch for each track
const uint8_t track_sublen[] = { 32, 48, 48 };
const uint8_t track_bitlen[] = { 7, 5, 5 };

uint32_t track_period_us[3];  // bit period of each track in microseconds
                              // initialized in calc_track_periods()

typedef struct {
  char *tracks[3];  // track data
} card;

// your magstripe card tracks go here
const card test_card = {
  {
    "%B4444444444444444^ABE/LINCOLN^291110100000931?",
    ";4444444444444444=29111010000093100000?",
    0
  },
};

void calc_track_periods()
{
  for (int i = 0; i < 3; i++)
    track_period_us[i] = (uint32_t) (1e6 / (SWIPE_SPEED * track_density[i]));
}

void static inline burn_cycles(uint32_t cycles)
{
  while (cycles > 0) {
    __asm__ volatile ("nop");
    cycles--;
  }
}

void static inline delay_us(uint32_t us)
{
  // obtained divisor of 20 by checking bit period with scope
  // assume loop in burn_cycles requires 20 clock cycles
  uint32_t cycles = (us * (F_CPU / 1000000)) / 20;
  burn_cycles(cycles);
}

void set_pin(uint8_t pin, bool state){
  if (state) {
    PORTB |= (1 << pin); // high
  }
  else {
    PORTB &= ~(1 << pin); // low
  }
}

void blink(int times)
{
  int i;
  for (i = 0; i < times; i++) {
    PIN_HIGH(LED_PIN);
    _delay_ms(200);
    PIN_LOW(LED_PIN);
    _delay_ms(200);
   } 
}

void setup_io()
{
  no_interrupts();

  DDRB |= (1 << COIL_A); // output
  DDRB |= (1 << COIL_B); // output
  DDRB |= (1 << LED_PIN); // output
  // DDRB = 0 by default so

  // BUTTON_PIN configured as input
  PORTB |= (1<<BUTTON_PIN); // set pull-up 
}

void await_button_press()
{
  while (PINREAD(BUTTON_PIN)) // button pin is high when not pressed
    _delay_ms(100);
}

static bool f2f_pole; // used to track signal state during playback (F2F encoding)

static inline void invert_coil_pole()
{
  f2f_pole ^= 1;
  set_pin(COIL_A, f2f_pole);
#ifndef SINGLE_POL
  set_pin(COIL_B, !f2f_pole);
#endif
}

void f2f_play_bit(bool bit, uint32_t period_us)
{
  // play F2F encoded bit
  // see http://www.edn.com/Home/PrintView?contentItemId=4426351
  const uint32_t half_period = period_us / 2;
  // invert magnetic pole at start of period
  invert_coil_pole();

  delay_us(half_period);

  // at half period, determine whether to invert pole
  if (bit)
    invert_coil_pole();

  delay_us(half_period);
}

void play_zeros(uint8_t n, uint32_t period_us)
{
  for (int i = 0; i < n; i++)
    f2f_play_bit(0, period_us); 
}

void play_byte(
  uint8_t byte, 
  uint8_t n_bits, 
  uint32_t period_us,
  uint8_t *lrc
)
{
    bool parity = 1;
    for (int i = 0; i < n_bits; i++) {
      bool bit = byte & 1;
      parity ^= bit;
                                                // TIMING SENSITIVE
      f2f_play_bit(bit, period_us - 30);        // subtract 30us to compensate for delay 
                                                // caused by extra processing within this loop
      byte >>= 1;
      if (lrc)
        *lrc ^= bit << i;
    }
    f2f_play_bit(parity, period_us);  // last bit is parity
}

void play_track(card *c, uint8_t track_num)
{
  char *track = c->tracks[track_num];

  if (!track) return; // check that the track exists

  uint32_t period_us = track_period_us[track_num];
  char *track_byte;
  uint8_t lrc = 0;

  // lead playback with zeros
  play_zeros(leading_zeros[track_num], period_us);

  // play back track data
  for (track_byte = track; *track_byte != 0; track_byte++) {
    uint8_t tb = *track_byte - track_sublen[track_num];
    play_byte(tb, track_bitlen[track_num] - 1, period_us, &lrc);
  }

  // play LRC
  play_byte(lrc, track_bitlen[track_num] - 1, period_us, 0);

  // end playback
  play_zeros(trailing_zeros[track_num], period_us);
}

void play_card(card *c)
{
  // let user know playback has begun by turning on LED
  PIN_HIGH(LED_PIN);
  PIN_LOW(COIL_A);
  PIN_LOW(COIL_B);

  f2f_pole = 0;

  for (int i = 0; i < 3; i++)
    play_track(c, i);

  // turn off LED and make sure coils are off
  PIN_LOW(LED_PIN);
  PIN_LOW(COIL_A);
  PIN_LOW(COIL_B);
}

int main(void)
{
  setup_io();
  calc_track_periods();

  // blink three times to show we initialized
  blink(3);

  while (1) {
    await_button_press();
    play_card(&test_card);
  }
}

MCU=attiny85
AVRDUDEMCU=t85
CPU_SPEED=-DF_CPU=8000000UL
CC=avr-gcc
CFLAGS=-g -std=c99 -Os -Wall -w -mcall-prologues -mmcu=$(MCU) $(CPU_SPEED)
OBJ2HEX=avr-objcopy
AVRDUDE=avrdude
PROGRAMMER ?= usbtiny
TARGET=magspoof

$(TARGET).hex: $(TARGET).c
	$(CC) $(CFLAGS) $(TARGET).c -o $(TARGET)
	$(OBJ2HEX) -R .eeprom -O ihex $(TARGET) $(TARGET).hex
	rm -f $(TARGET)

install: $(TARGET).hex
	$(AVRDUDE) -p $(AVRDUDEMCU) -c $(PROGRAMMER) -U flash:w:$(TARGET).hex

noreset: all
	$(AVRDUDE) -p $(AVRDUDEMCU) -c $(PROGRAMMER) -U flash:w:$(TARGET).hex

test:
	./test.sh

fuse:
	$(AVRDUDE) -p $(AVRDUDEMCU) -c $(PROGRAMMER) -U lfuse:w:0xe2:m -U hfuse:w:0xdf:m -U efuse:w:0xff:m 

firstprog: fuse install
	$(AVRDUDE) -p $(AVRDUDEMCU) -c $(PROGRAMMER) -U flash:w:$(TARGET).hex

clean :
	rm -f *.hex *.obj *.o

#
#
# RyscCorp / magspoof_r3
Learn Git and GitHub without any code!
Using the Hello World guide, youâ€™ll start a branch, write comments, and open a pull req
#
#
Code Issues 2 Pull requests 1 Projects 0 Actions Wiki Security Pulse Community
Branch: master 
Find fileCopy path
magspoof_r3/software/README.md
 jr Magspoof R3 Initial Commit
5e9bcac on Apr 24, 2017
0 contributors
174 lines (124 sloc)  5.66 KB
RawBlameHistory
 
Magspoof R3 Firmware
This firmware targets the Magspoof R3 hardware from Rysc Corp.

The sources include:

variable swipe speed support that result in more reliable magstripe reads
many small cleanups and convenience improvements
build scripts that do not depend on arduino studio (build from command line)
These sources have not been compiled under Linux. If you run into trouble, please contact support at ryscc dot com or report an issue through github.

Setup
MacOS
Install Crosspack AVR and avrdude.

$ brew cask install crosspack-avr
$ brew install avrdude

$ avrdude -v
avrdude: Version 6.3, compiled on Sep 17 2016 at 02:19:28

$ avr-gcc -v
  ...
gcc version 4.8.1 (GCC)
After installing Crosspack AVR, add /usr/local/CrossPack-AVR/bin (or wherever avr-gcc is located) to your shell path.

Programming MagSpoof for the first time
Clone the git repository and run the following command to program the MagSpoof using an AVR Pocket Programmer from SparkFun.

bash-3.2$ PROGRAMMER=usbtiny make firstprog
avrdude -p t85 -c usbtiny -U lfuse:w:0xe2:m -U hfuse:w:0xdf:m -U efuse:w:0xff:m

avrdude: AVR device initialized and ready to accept instructions

Reading | ################################################## | 100% 0.00s

avrdude: Device signature = 0x1e930b (probably t85)
avrdude: reading input file "0xe2"
avrdude: writing lfuse (1 bytes):

Writing | ################################################## | 100% 0.00s

avrdude: 1 bytes of lfuse written
avrdude: verifying lfuse memory against 0xe2:
avrdude: load data lfuse data from input file 0xe2:
avrdude: input file 0xe2 contains 1 bytes
avrdude: reading on-chip lfuse data:

Reading | ################################################## | 100% 0.00s

avrdude: verifying ...
avrdude: 1 bytes of lfuse verified
avrdude: reading input file "0xdf"
avrdude: writing hfuse (1 bytes):

Writing | ################################################## | 100% 0.00s

avrdude: 1 bytes of hfuse written
avrdude: verifying hfuse memory against 0xdf:
avrdude: load data hfuse data from input file 0xdf:
avrdude: input file 0xdf contains 1 bytes
avrdude: reading on-chip hfuse data:

Reading | ################################################## | 100% 0.00s

avrdude: verifying ...
avrdude: 1 bytes of hfuse verified
avrdude: reading input file "0xff"
avrdude: writing efuse (1 bytes):

Writing | ################################################## | 100% 0.00s

avrdude: 1 bytes of efuse written
avrdude: verifying efuse memory against 0xff:
avrdude: load data efuse data from input file 0xff:
avrdude: input file 0xff contains 1 bytes
avrdude: reading on-chip efuse data:

Reading | ################################################## | 100% 0.00s

avrdude: verifying ...
avrdude: 1 bytes of efuse verified

avrdude: safemode: Fuses OK (E:FF, H:DF, L:E2)

avrdude done.  Thank you.

avr-gcc -g -std=c99 -Os -Wall -w -mcall-prologues -mmcu=attiny85 -DF_CPU=8000000UL magspoof.c -o magspoof
avr-objcopy -R .eeprom -O ihex magspoof magspoof.hex
rm -f magspoof
avrdude -p t85 -c usbtiny -U flash:w:magspoof.hex

avrdude: AVR device initialized and ready to accept instructions

Reading | ################################################## | 100% 0.00s

avrdude: Device signature = 0x1e930b (probably t85)
avrdude: NOTE: "flash" memory has been specified, an erase cycle will be performed
         To disable this feature, specify the -D option.
avrdude: erasing chip
avrdude: reading input file "magspoof.hex"
avrdude: input file magspoof.hex auto detected as Intel Hex
avrdude: writing flash (1170 bytes):

Writing | ################################################## | 100% 1.70s

avrdude: 1170 bytes of flash written
avrdude: verifying flash memory against magspoof.hex:
avrdude: load data flash data from input file magspoof.hex:
avrdude: input file magspoof.hex auto detected as Intel Hex
avrdude: input file magspoof.hex contains 1170 bytes
avrdude: reading on-chip flash data:

Reading | ################################################## | 100% 2.36s

avrdude: verifying ...
avrdude: 1170 bytes of flash verified

avrdude: safemode: Fuses OK (E:FF, H:DF, L:E2)

avrdude done.  Thank you.

avrdude -p t85 -c usbtiny -U flash:w:magspoof.hex

avrdude: AVR device initialized and ready to accept instructions

Reading | ################################################## | 100% 0.00s

avrdude: Device signature = 0x1e930b (probably t85)
avrdude: NOTE: "flash" memory has been specified, an erase cycle will be performed
         To disable this feature, specify the -D option.
avrdude: erasing chip
avrdude: reading input file "magspoof.hex"
avrdude: input file magspoof.hex auto detected as Intel Hex
avrdude: writing flash (1170 bytes):

Writing | ################################################## | 100% 1.69s

avrdude: 1170 bytes of flash written
avrdude: verifying flash memory against magspoof.hex:
avrdude: load data flash data from input file magspoof.hex:
avrdude: input file magspoof.hex auto detected as Intel Hex
avrdude: input file magspoof.hex contains 1170 bytes
avrdude: reading on-chip flash data:

Reading | ################################################## | 100% 2.36s

avrdude: verifying ...
avrdude: 1170 bytes of flash verified

avrdude: safemode: Fuses OK (E:FF, H:DF, L:E2)

avrdude done.  Thank you.
Testing the MagSpoof
Clone the git repository and run the following command.

bash-3.2$ make test
./test.sh
1. Connect magstripe reader to PC
2. Turn on magspoof
3. Hold magspoof close to reader head
4. Push button on magspoof
%B4444444444444444^ABE/LINCOLN^291110100000931?;4444444444444444=29111010000093100000?+4444444444444444=29111010000093100000?
PASS
#
#! /bin/bash

TRACK_DATA="%B4444444444444444^ABE/LINCOLN^291110100000931?;4444444444444444=29111010000093100000?+4444444444444444=29111010000093100000?"

echo "1. Connect magstripe reader to PC"
echo "2. Turn on magspoof"
echo "3. Hold magspoof close to reader head"
echo "4. Push button on magspoof"
read TRACK
if [ "$TRACK" == $TRACK_DATA ]; then
  echo PASS
  exit 0
fi
